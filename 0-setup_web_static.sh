#!/usr/bin/env bash
# Nginx web server setup script for static web content deployment.
#
# This script automates the installation and configuration of Nginx to serve
# static web content from a custom directory structure. It creates the necessary
# directory hierarchy, sets up a test HTML page, configures Nginx with a custom
# server block, and establishes proper file permissions.
#
# The script performs the following operations:
#   1. Checks if Nginx is installed and installs it if necessary
#   2. Creates directory structure for web static content releases
#   3. Creates a test HTML page in the releases directory
#   4. Sets up a symbolic link to the current release
#   5. Configures proper ownership for the data directory
#   6. Configures Nginx to serve static content at /hbnb_static endpoint
#   7. Restarts Nginx to apply the new configuration
#
# Directory Structure Created:
#   /data/web_static/releases/     - Contains all release versions
#   /data/web_static/shared/       - Shared resources across releases
#   /data/web_static/releases/test/ - Test release directory
#   /data/web_static/current       - Symlink to active release
#
# Prerequisites:
#   - Script must be run with sudo privileges or as root
#   - Ubuntu/Debian-based system with apt package manager
#   - Internet connection for package installation
#
# Usage:
#   sudo ./setup_nginx.sh
#
# Note:
#   This script overwrites /etc/nginx/sites-available/default


# Check if Nginx is installed by querying the package manager
# Redirects both stdout and stderr to /dev/null for silent operation
if ! dpkg -s nginx &> /dev/null; then
    # Update package lists to ensure latest package information
    sudo apt-get update
    # Install Nginx with automatic yes to prompts (-y flag)
    sudo apt-get install -y nginx
fi

# Create the base directory for web static content releases
# -p flag creates parent directories as needed without errors if exists
sudo mkdir -p /data/web_static/releases/

# Create the shared directory for resources common to all releases
sudo mkdir -p /data/web_static/shared/

# Create a test release directory to validate the deployment structure
sudo mkdir -p /data/web_static/releases/test/

# Define the HTML content for the test page
# Uses newline escape sequences for proper HTML formatting
HTML_CONTENT="<html>\n  <head>\n  </head>\n  <body>\n    ALX\n  </body>\n</html>"
# Write the HTML content to index.html in the test release directory
# -e flag enables interpretation of backslash escapes
# tee with sudo writes to a privileged location
# Redirect tee output to /dev/null to suppress console output
echo -e "$HTML_CONTENT" | sudo tee /data/web_static/releases/test/index.html > /dev/null

# Remove any existing symbolic link to prevent conflicts
# -f flag forces removal without prompting
sudo rm -f /data/web_static/current
# Create a symbolic link pointing to the test release directory
# This allows switching between releases by updating the symlink
sudo ln -s /data/web_static/releases/test/ /data/web_static/current

# Set ownership of the entire /data/ directory tree to ubuntu user and group
# -R flag applies the change recursively to all subdirectories and files
# This ensures the ubuntu user has proper access to manage the content
sudo chown -R ubuntu:ubuntu /data/

# Write the Nginx configuration to the default site configuration file
# printf %s prevents interpretation of escape sequences in the string
# The configuration includes:
#   - Default HTTP server listening on port 80
#   - Custom X-Served-By header with hostname for request tracking
#   - /hbnb_static location block serving content from /data/web_static/current
#   - IPv4 and IPv6 support
printf %s "#
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://nginx.org/en/docs/
# https://wiki.debian.org/Nginx/DirectoryStructure
##

# Default server configuration
#
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    # SSL configuration
    #
    # listen 443 ssl default_server;
    # listen [::]:443 ssl default_server;
    #
    # Note: You should disable gzip for SSL traffic.
    # See: https://bugs.debian.org/773332
    #
    # Read up on ssl_ciphers to ensure a secure configuration.
    # See: https://bugs.debian.org/765782
    #
    # Self signed certs generated by the ssl-cert package
    # Don't use them in a production server!
    #
    # include snippets/snakeoil.conf;

    add_header X-Served-By $HOSTNAME;
    root /var/www/html;

    # Add index.php to the list if you are using PHP
    index index.html index.htm index.nginx-debian.html;

    server_name _;

    location /hbnb_static {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        alias /data/web_static/current;
        index index.html index.htm;
        try_files $uri $uri/ =404;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #   deny all;
    #}
}

#" > /etc/nginx/sites-available/default


# Restart the Nginx service to apply the new configuration
# Uses systemctl for service management on systemd-based systems
sudo systemctl restart nginx
